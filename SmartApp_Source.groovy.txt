import groovy.json.JsonBuilder

/**
 *  Plex Plus
 *
 *  Copyright 2016 MacArthur
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 * 
 * VERSION CONTROL - Plex Plus Parent
 * ###############
 *
 *  v2.0 - Modified Matt's excellent Smart App to use parent & child apps
 * 				- Allowing multi room matching to a single player
 * 				- Allowing flexible number of "rooms"
 * 		 - Added support for matching against Player Name or User Name or IP Address (IP address requires Jake's modified exe)
 *		 - Added support for on and off switches on the same state change.
 *		 - Added disabled switch to stop automation
 *  v2.1 - Added Europe and USA addresses in the API Info screen
 *  v2.2 - Added App ID and Access Token to "Live Logging", just enable logging, open App and press "Done"
 * 	v2.3 - Fixed child app bug.
 *	v2.4 - Updated API Information to return US or EU.
 *	v2.5 - Added "Last Event" in app to make setting up players easier.
 *  v2.6 - Updated icon path.
 *  v2.7 - Added USA West API Info due to new data center and also added App ID and Token independently in case new servers are introduced in the future.
 *
 */

definition(
    name: "Plex Plus",
    namespace: "ChristianH",
    author: "Christian Hjelseth & Jake Tebbett",
    description: "Allows web requests to dim/turn off/on lights when plex is playing",
    category: "My Apps",
    iconUrl: "https://raw.githubusercontent.com/jebbett/Plex2SmartThings/PlexPlus/icon.png",
    iconX2Url: "https://raw.githubusercontent.com/jebbett/Plex2SmartThings/PlexPlus/icon.png",
    iconX3Url: "https://raw.githubusercontent.com/jebbett/Plex2SmartThings/PlexPlus/icon.png",
    oauth: [displayName: "PlexServer", displayLink: ""])


def installed() {
    log.debug "Installed with settings: ${settings}"
    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"
    unsubscribe()
    initialize()
}

def initialize() {
    // nothing needed here, since the child apps will handle preferences/subscriptions
    // this just logs some messages for demo/information purposes
    log.debug "there are ${childApps.size()} child smartapps"
    childApps.each {child ->
        log.debug "child app: ${child.label}"
    }
    if (!state.accessToken) {
    	createAccessToken()
   	}
    
    logWriter("APP_ID: $app.id")
    logWriter("ACCESS_TOKEN: $state.accessToken")
    
    if(state.lastEvent == null){state.lastEvent = "No event recieved, please ensure that config.config is setup correctly"}
}

preferences {
	page(name: "mainMenu")
    page(name: "lastEvt")
}

def mainMenu() {

	if (state.debugLogging == null) 	{ state.debugLogging = false }

    dynamicPage(name: "mainMenu", title: "Rooms", install: true, uninstall: true,submitOnChange: true) {              
       
        section {
            app(name: "childapp", appName: "Plex Plus Child", namespace: "ChristianH", title: "Create New Room", multiple: true)
            }	
        
    if (!state.accessToken) {
    	createAccessToken()
   	}
    	section(title: "Last Event / App ID / Access Token") { 
        	href(name: "usersBal", title: "Last Event / App ID / Access Token", required: false, page: "lastEvt", description: "view last event recieved by app")
    	}
        
        section(title: "API Information") { 
        	href url: "https://graph.api.smartthings.com/api/smartapps/installations/${app.id}/appinfo?access_token=${state.accessToken}",
            		style:"embedded", required:false, title:"API Info US Standard", description: "Tap to view Info"
            
            href url: "https://graph-na02-useast1.api.smartthings.com/api/smartapps/installations/${app.id}/appinfo3?access_token=${state.accessToken}",
            		style:"embedded", required:false, title:"API Info US East", description: "Tap to view Info"
    	
        	href url: "https://graph-eu01-euwest1.api.smartthings.com/api/smartapps/installations/${app.id}/appinfo2?access_token=${state.accessToken}", 
            		style:"embedded", required:false, title:"API Info Europe", description: "Tap to view Info"
    	}
        
        // Enables logging debug only when enabled
        section(title: "Debug Logging") {
       		paragraph "If you experiencing issues please enable logging to help troubleshoot"
            input "debugLogging", "bool", title: "Debug Logging...", required: false, defaultValue: false, refreshAfterSelection: true
            	
            if (debugLogging) { 
            	state.debugLogging = true 
                logWriter("Debug Logging has been ${state.debugLogging.toString().toUpperCase()}")
                paragraph "Debug Logging is Enabled: ${state.debugLogging}"
            }
            else { 
            	state.debugLogging = false 
            	logWriter("Debug Logging has been ${state.debugLogging.toString().toUpperCase()}")    
            }
    	}
        
        
    }
}

def lastEvt() {

    dynamicPage(name: "lastEvt", title: "Last Event", install: false, uninstall: false) {
    	section(title: "App ID") {
        	paragraph "$app.id"
        }
        
        section(title: "Access Token") {
        	paragraph "$state.accessToken"
        }
        
        section(title: "Details of Last Event Recieved") {
        	paragraph "$state.lastEvent"
        }
    }
}


// These Methods Generate Json for you Info Only
def appInfoJson() {
	def configJson = new groovy.json.JsonOutput().toJson([
    	appId:        app.id,
    	accessToken:  state.accessToken,
    	
    	onPlay: 	"https://graph.api.smartthings.com/api/smartapps/installations/${app.id}/statechanged/onplay",
		onPause:	"https://graph.api.smartthings.com/api/smartapps/installations/${app.id}/statechanged/onpause",
		onStop:		"https://graph.api.smartthings.com/api/smartapps/installations/${app.id}/statechanged/onstop"
        
    ])

    def configString = new groovy.json.JsonOutput().prettyPrint(configJson)
    render contentType: "text/plain", data: configString
}

def appInfoJson2() {
	def configJson = new groovy.json.JsonOutput().toJson([
    	appId:        app.id,
    	accessToken:  state.accessToken,

    	onPlay: 	"https://graph-eu01-euwest1.api.smartthings.com/api/smartapps/installations/${app.id}/statechanged/onplay",
		onPause:	"https://graph-eu01-euwest1.api.smartthings.com/api/smartapps/installations/${app.id}/statechanged/onpause",
		onStop:		"https://graph-eu01-euwest1.api.smartthings.com/api/smartapps/installations/${app.id}/statechanged/onstop"        
        
    ])

    def configString = new groovy.json.JsonOutput().prettyPrint(configJson)
    render contentType: "text/plain", data: configString
}

def appInfoJson3() {
	def configJson = new groovy.json.JsonOutput().toJson([
    	appId:        app.id,
    	accessToken:  state.accessToken,

    	onPlay: 	"https://graph-na02-useast1.api.smartthings.com/api/smartapps/installations/${app.id}/statechanged/onplay",
		onPause:	"https://graph-na02-useast1.api.smartthings.com/api/smartapps/installations/${app.id}/statechanged/onpause",
		onStop:		"https://graph-na02-useast1.api.smartthings.com/api/smartapps/installations/${app.id}/statechanged/onstop"        
        
    ])

    def configString = new groovy.json.JsonOutput().prettyPrint(configJson)
    render contentType: "text/plain", data: configString
}

mappings {
  path("/statechanged/:command") 	{ action: [ GET: "OnCommandRecieved" ] }
  path("/appinfo") 					{ action: [ GET: "appInfoJson"]   }
  path("/appinfo2") 				{ action: [ GET: "appInfoJson2"]   }
  path("/appinfo3") 				{ action: [ GET: "appInfoJson3"]   }
}

private def logWriter(value) {
	if (state.debugLogging) {
        log.debug "${value}"
    }	
}


def OnCommandRecieved() {
	def command = params.command
	def userName = params.user
	def playerName = params.player
    def playerIP = params.ipadd
	def mediaType = params.type

	// If Plex2SmartThings.exe has not been modified to return IP Address (ipadd) then return No IP to stop false triggering.
    if (playerIP == null) {
        playerIP = "No IP Returned"
    }

	state.lastEvent = " User Name: $userName \n Player Name: $playerName \n IP Address: $playerIP \n Command: $command \n Media Type: $mediaType"
	logWriter ("Plex.$command($userName, $playerName, $playerIP, $mediaType)")
    
	childApps.each { child ->
    	child.AppCommandRecieved(command, userName, playerName, playerIP, mediaType)
    }
	return
}
